{
	"info": {
		"_postman_id": "ff72c0a5-1f5f-452f-a7ad-d35f50141032",
		"name": "HBnB API Improved",
		"description": "Collection for testing HBnB API endpoints with timestamp for uniqueness",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43266068"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response has access_token\", function () {",
									"    pm.expect(jsonData).to.have.property('access_token');",
									"});",
									"if (jsonData && jsonData.access_token) {",
									"    pm.environment.set(\"admin_token\", jsonData.access_token);",
									"    // Also set a general token for Authorization header",
									"    pm.environment.set(\"token\", jsonData.access_token);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"admin@example.com\",\n    \"password\": \"admin123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						},
						"description": "Login with admin credentials"
					},
					"response": []
				},
				{
					"name": "Create test user for login",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response has user ID\", function () {",
									"    pm.expect(jsonData).to.have.property('id');",
									"});",
									"if (jsonData) {",
									"    pm.environment.set(\"test_user_id\", jsonData.id);",
									"    pm.environment.set(\"test_user_email\", jsonData.email);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\": \"Test\",\n    \"last_name\": \"User\",\n    \"email\": \"test_user_{{$timestamp}}@example.com\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/users/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								""
							]
						},
						"description": "Create a test user for login"
					},
					"response": []
				},
				{
					"name": "Login (User)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response has access_token\", function () {",
									"    pm.expect(jsonData).to.have.property('access_token');",
									"});",
									"if (jsonData && jsonData.access_token) {",
									"    pm.environment.set(\"user_token\", jsonData.access_token);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{test_user_email}}\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						},
						"description": "Login with regular user credentials"
					},
					"response": []
				}
			],
			"description": "Authentication endpoints"
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response has user ID\", function () {",
									"    pm.expect(jsonData).to.have.property('id');",
									"});",
									"if (jsonData) {",
									"    pm.environment.set(\"created_user_id\", jsonData.id);",
									"    pm.environment.set(\"created_user_email\", jsonData.email);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\": \"Test\",\n    \"last_name\": \"User\",\n    \"email\": \"user_{{$timestamp}}@example.com\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/users/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								""
							]
						},
						"description": "Create a new user"
					},
					"response": []
				},
				{
					"name": "Get All Users (Admin)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								""
							]
						},
						"description": "Get all users (admin only)"
					},
					"response": []
				},
				{
					"name": "Get User by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"User ID matches requested ID\", function () {",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"created_user_id\"));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/users/{{created_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{created_user_id}}"
							]
						},
						"description": "Get a specific user by ID"
					},
					"response": []
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"First name was updated\", function () {",
									"    pm.expect(jsonData.first_name).to.eql(\"Updated\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"first_name\": \"Updated\",\n    \"last_name\": \"Name_{{$timestamp}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/users/{{created_user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{created_user_id}}"
							]
						},
						"description": "Update user information"
					},
					"response": []
				}
			],
			"description": "User management endpoints"
		},
		{
			"name": "Places",
			"item": [
				{
					"name": "Create Place",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response has place ID\", function () {",
									"    pm.expect(jsonData).to.have.property('id');",
									"});",
									"if (jsonData) {",
									"    pm.environment.set(\"created_place_id\", jsonData.id);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"owner_id\": \"{{test_user_id}}\",\n    \"title\": \"Luxury Apartment {{$timestamp}}\",\n    \"description\": \"A beautiful luxury apartment with ocean view\",\n    \"number_rooms\": 3,\n    \"number_bathrooms\": 2,\n    \"max_guest\": 6,\n    \"price_by_night\": 250,\n    \"price\": 1500,\n    \"latitude\": 40.7128,\n    \"longitude\": -74.0060\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/places/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"places",
								""
							]
						},
						"description": "Create a new place listing"
					},
					"response": []
				},
				{
					"name": "Get All Places",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/places/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"places",
								""
							]
						},
						"description": "Get all place listings"
					},
					"response": []
				},
				{
					"name": "Get Place by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Place ID matches requested ID\", function () {",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"created_place_id\"));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/places/{{created_place_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"places",
								"{{created_place_id}}"
							]
						},
						"description": "Get a specific place by ID"
					},
					"response": []
				},
				{
					"name": "Update Place",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Price by night was updated\", function () {",
									"    pm.expect(jsonData.price_by_night).to.eql(300);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Updated Luxury Apartment {{$timestamp}}\",\n    \"price_by_night\": 300,\n    \"max_guest\": 8\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/places/{{created_place_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"places",
								"{{created_place_id}}"
							]
						},
						"description": "Update place information"
					},
					"response": []
				},
				{
					"name": "Get Reviews for Place",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/places/{{created_place_id}}/reviews",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"places",
								"{{created_place_id}}",
								"reviews"
							]
						},
						"description": "Get all reviews for a specific place"
					},
					"response": []
				}
			],
			"description": "Place management endpoints"
		},
		{
			"name": "Reviews",
			"item": [
				{
					"name": "Create Review",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response has review ID\", function () {",
									"    pm.expect(jsonData).to.have.property('id');",
									"});",
									"if (jsonData) {",
									"    pm.environment.set(\"created_review_id\", jsonData.id);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"user_id\": \"{{test_user_id}}\",\n    \"place_id\": \"{{created_place_id}}\",\n    \"text\": \"Great place, would stay again! {{$timestamp}}\",\n    \"rating\": 5\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/reviews/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"reviews",
								""
							]
						},
						"description": "Create a new review"
					},
					"response": []
				},
				{
					"name": "Get All Reviews",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/reviews/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"reviews",
								""
							]
						},
						"description": "Get all reviews"
					},
					"response": []
				},
				{
					"name": "Get Review by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Review ID matches requested ID\", function () {",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"created_review_id\"));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/reviews/{{created_review_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"reviews",
								"{{created_review_id}}"
							]
						},
						"description": "Get a specific review by ID"
					},
					"response": []
				},
				{
					"name": "Update Review",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Review text was updated\", function () {",
									"    pm.expect(jsonData.text).to.include(\"Updated review\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"Updated review {{$timestamp}}: Still a great place!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/reviews/{{created_review_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"reviews",
								"{{created_review_id}}"
							]
						},
						"description": "Update review information"
					},
					"response": []
				},
				{
					"name": "Delete Review",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response has success message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.include(\"deleted\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/reviews/{{created_review_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"reviews",
								"{{created_review_id}}"
							]
						},
						"description": "Delete a review"
					},
					"response": []
				},
				{
					"name": "Get Reviews by Place",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/reviews/place/{{created_place_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"reviews",
								"place",
								"{{created_place_id}}"
							]
						},
						"description": "Get all reviews for a specific place"
					},
					"response": []
				}
			],
			"description": "Review management endpoints"
		},
		{
			"name": "Amenities",
			"item": [
				{
					"name": "Create Amenity",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.test(\"Response has amenity ID\", function () {",
									"    pm.expect(jsonData).to.have.property('id');",
									"});",
									"if (jsonData) {",
									"    pm.environment.set(\"created_amenity_id\", jsonData.id);",
									"    pm.environment.set(\"amenity_name_timestamp\", \"Swimming Pool \" + Date.now());",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Swimming Pool {{$timestamp}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/amenities/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"amenities",
								""
							]
						},
						"description": "Create a new amenity"
					},
					"response": []
				},
				{
					"name": "Get All Amenities",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/amenities/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"amenities",
								""
							]
						},
						"description": "Get all amenities"
					},
					"response": []
				},
				{
					"name": "Get Amenity by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Amenity ID matches requested ID\", function () {",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"created_amenity_id\"));",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/amenities/{{created_amenity_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"amenities",
								"{{created_amenity_id}}"
							]
						},
						"description": "Get a specific amenity by ID"
					},
					"response": []
				},
				{
					"name": "Update Amenity",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Amenity name was updated\", function () {",
									"    pm.expect(jsonData.name).to.include(\"Updated Amenity\");",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Amenity {{$timestamp}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/amenities/{{created_amenity_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"amenities",
								"{{created_amenity_id}}"
							]
						},
						"description": "Update amenity information"
					},
					"response": []
				}
			],
			"description": "Amenity management endpoints"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Pre-request script to handle setting up variables",
					"// This script runs before each request in the collection",
					"",
					"// Create a timestamp for use in unique identifiers",
					"pm.variables.set(\"timestamp\", Date.now());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:5000",
			"type": "string"
		}
	]
}
